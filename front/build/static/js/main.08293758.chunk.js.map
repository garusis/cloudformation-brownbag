{"version":3,"sources":["layout/NavBar/index.js","shared/Components/DrawTable/index.js","pages/Home/index.js","App.js","serviceWorker.js","index.js"],"names":["withStyles","root","flexGrow","props","classes","react_default","a","createElement","className","AppBar_default","position","Toolbar_default","Typography_default","variant","color","theme","width","marginTop","spacing","unit","overflowX","margin","table","minWidth","_ref","structure","data","Paper_default","Table_default","TableHead_default","TableRow_default","map","keyName","TableCell_default","label","TableBody_default","obj","key","id","name","lastName","Home","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","axios","get","result","setState","Fragment","layout_NavBar","Components_DrawTable","Component","App","BrowserRouter","Route","path","exact","component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4RAiCeA,2BA1BA,CACbC,KAAM,CACJC,SAAU,IAwBCF,CApBf,SAAgBG,GAAO,IACbC,EAAYD,EAAZC,QAER,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAWJ,EAAQH,MACtBI,EAAAC,EAAAC,cAACE,EAAAH,EAAD,CAAQI,SAAS,UACfL,EAAAC,EAAAC,cAACI,EAAAL,EAAD,KACED,EAAAC,EAAAC,cAACK,EAAAN,EAAD,CAAYO,QAAQ,KAAKC,MAAM,WAA/B,uIC6BKd,uBAvCA,SAAAe,GAAK,MAAK,CACvBd,KAAM,CACJe,MAAO,MACPC,UAAgC,EAArBF,EAAMG,QAAQC,KACzBC,UAAW,OACXC,OAAQ,MAEVC,MAAO,CACLC,SAAU,OA+BCvB,CA3BG,SAAAwB,GAAA,IAAGpB,EAAHoB,EAAGpB,QAASqB,EAAZD,EAAYC,UAAWC,EAAvBF,EAAuBE,KAAvB,OAChBrB,EAAAC,EAAAC,cAACoB,EAAArB,EAAD,CAAOE,UAAWJ,EAAQH,MACxBI,EAAAC,EAAAC,cAACqB,EAAAtB,EAAD,CAAOE,UAAWJ,EAAQkB,OACxBjB,EAAAC,EAAAC,cAACsB,EAAAvB,EAAD,KACED,EAAAC,EAAAC,cAACuB,EAAAxB,EAAD,KACGmB,EAAUM,IAAI,SAAAC,GAAO,OACpB3B,EAAAC,EAAAC,cAAC0B,EAAA3B,EAAD,KAAY0B,EAAQE,WAI1B7B,EAAAC,EAAAC,cAAC4B,EAAA7B,EAAD,KACGoB,EAAKK,IAAI,SAAAK,GAAG,OACX/B,EAAAC,EAAAC,cAACuB,EAAAxB,EAAD,CAAU+B,IAAKD,EAAIE,IAChBb,EAAUM,IAAI,SAAAC,GAAO,OAClB3B,EAAAC,EAAAC,cAAC0B,EAAA3B,EAAD,KAAY8B,EAAIJ,EAAQK,iCChClCZ,EAAY,CAChB,CACES,MAAO,SACPG,IAAK,QAEP,CACEH,MAAO,WACPG,IAAK,aAGHX,EAAO,CACX,CACEa,KAAM,OACNC,SAAU,UAEZ,CACED,KAAM,YACNC,SAAU,aAiCCC,cA5Bb,SAAAA,EAAYtC,GAAO,IAAAuC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACjBC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,KAAM1C,KACD8C,MAAQ,CACXvB,KAAM,IAHSgB,0NASIQ,IAAMC,IAAI,0CACP,iBADlBC,0BAEFP,KAAKQ,SAAS,CAAE3B,KAAM0B,+BAEhB,oEAGRP,KAAKQ,SAAS,CAAE3B,sJAIlB,OACErB,EAAAC,EAAAC,cAACF,EAAAC,EAAMgD,SAAP,KACEjD,EAAAC,EAAAC,cAACgD,EAAD,MACAlD,EAAAC,EAAAC,cAACiD,EAAD,CAAW/B,UAAWA,EAAWC,KAAMmB,KAAKI,MAAMvB,eAxBvC+B,aCTJC,mLAVX,OACErD,EAAAC,EAAAC,cAACoD,EAAA,EAAD,KACEtD,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACqD,EAAA,EAAD,CAAOC,KAAK,IAAIC,OAAK,EAACC,UAAWtB,aALzBgB,aCQEO,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOjE,EAAAC,EAAAC,cAACgE,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.08293758.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\n\nconst styles = {\n  root: {\n    flexGrow: 1,\n  },\n};\n\nfunction NavBar(props) {\n  const { classes } = props;\n\n  return (\n    <div className={classes.root}>\n      <AppBar position=\"static\">\n        <Toolbar>\n          <Typography variant=\"h6\" color=\"inherit\">\n            CloudFormation Brown Bag\n          </Typography>\n        </Toolbar>\n      </AppBar>\n    </div>\n  );\n}\n\nNavBar.propTypes = {\n  classes: PropTypes.object.isRequired,\n};\n\nexport default withStyles(styles)(NavBar);","import React from \"react\";\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\nimport Table from \"@material-ui/core/Table\";\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Paper from '@material-ui/core/Paper';\n\nconst styles = theme => ({\n  root: {\n    width: '90%',\n    marginTop: theme.spacing.unit * 3,\n    overflowX: 'auto',\n    margin: '5%'\n  },\n  table: {\n    minWidth: 700,\n  },\n});\n\nconst DrawTable = ({ classes, structure, data }) => (\n  <Paper className={classes.root}>\n    <Table className={classes.table}>\n      <TableHead>\n        <TableRow>\n          {structure.map(keyName => (\n            <TableCell>{keyName.label}</TableCell>\n          ))}\n        </TableRow>\n      </TableHead>\n      <TableBody>\n        {data.map(obj => (\n          <TableRow key={obj.id}>\n            {structure.map(keyName => (\n                <TableCell>{obj[keyName.key]}</TableCell>\n            ))}\n          </TableRow>\n        ))}\n      </TableBody>\n    </Table>\n  </Paper>\n);\n\nDrawTable.propTypes = {\n  classes: PropTypes.object.isRequired\n};\n\nexport default withStyles(styles)(DrawTable);\n","import React, { Component } from \"react\";\nimport NavBar from \"./../../layout/NavBar\";\nimport DrawTable from \"../../shared/Components/DrawTable\";\nimport axios from \"axios\";\nconst structure = [\n  {\n    label: \"Nombre\",\n    key: \"name\"\n  },\n  {\n    label: \"Apellido\",\n    key: \"lastName\"\n  }\n];\nconst data = [\n  {\n    name: \"Pepe\",\n    lastName: \"Grillo\"\n  },\n  {\n    name: \"Christian\",\n    lastName: \"Avendano\"\n  }\n];\n\nclass Home extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      data: []\n    };\n  }\n\n  async componentDidMount() {\n    try {\n      let result = await axios.get(\"https://aasdasdasdasdasd.asd\");\n      if (typeof result === \"array\") {\n        this.setState({ data: result });\n      } else {\n        throw \"Se danio\";\n      }\n    } catch (error) {\n      this.setState({ data });\n    }\n  }\n  render() {\n    return (\n      <React.Fragment>\n        <NavBar />\n        <DrawTable structure={structure} data={this.state.data} />\n      </React.Fragment>\n    );\n  }\n}\nexport default Home;\n","import React, { Component } from \"react\";\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\nimport Home from './pages/Home'\n\nclass App extends Component {\n  render() {\n    return (\n      <Router>\n        <div>\n          <Route path=\"/\" exact component={Home} />\n        </div>\n      </Router>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}